/* -*-c++-*- */
/* osgEarth - Geospatial SDK for OpenSceneGraph
 * Copyright 2018 Pelican Mapping
 * http://osgearth.org
 *
 * osgEarth is free software; you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>
 */
#ifndef OSGEARTH_IMGUI_UTILS_H
#define OSGEARTH_IMGUI_UTILS_H 1

#include "GL/glew.h"
#include "imgui.h"

#include <osg/OperationThread>
#include <osg/GraphicsContext>
#include <osg/Notify>
#include <osgEarth/MapNode>
#include <osgEarth/VisibleLayer>
#include <osgEarth/EarthManipulator>
#include <osgEarth/ImageLayer>
#include <osgEarth/ThreeDTilesLayer>
#include <osgEarth/ThreadingUtils>
#include <osgEarth/Geocoder>
#include <osgEarth/ViewFitter>
#include <osgEarth/NetworkMonitor>

using namespace osgEarth;

class GlewInitOperation : public osg::Operation
{
public:
    GlewInitOperation()
        : osg::Operation("GlewInitCallback", false)
    {
    }

    void operator()(osg::Object* object) override
    {
        osg::GraphicsContext* context = dynamic_cast<osg::GraphicsContext*>(object);
        if (!context)
        {
            return;
        }

        if (glewInit() != GLEW_OK)
        {
            OSG_FATAL << "glewInit() failed" << std::endl;
        }
    }
};

class LayersGUI
{
public:
    LayersGUI()
    {
    }

    void draw(osgEarth::MapNode* mapNode, osg::Camera* camera, EarthManipulator* manip)
    {
        osgEarth::VisibleLayerVector layers;
        mapNode->getMap()->getLayers(layers);

        ImGui::Begin("Layers");
        for (int i = layers.size() - 1; i >= 0; --i)
        {
            osgEarth::Layer* layer = layers[i].get();
            ImGui::PushID(layer);
            osgEarth::VisibleLayer *visibleLayer = dynamic_cast<osgEarth::VisibleLayer*>(layer);
            if (visibleLayer)
            {
                bool visible = visibleLayer->getVisible();
                ImGui::Checkbox(layer->getName().c_str(), &visible);
                visibleLayer->setVisible(visible);
            }
            else
            {
                ImGui::Text(layer->getName().c_str());
            }

            ImGui::SameLine();
            if (i > 0)
            {
                if (ImGui::ArrowButton("down", ImGuiDir_Down))
                {
                    mapNode->getMap()->moveLayer(layer, i - 1);
                }
            }
            if (i < layers.size() - 1)
            {
                ImGui::SameLine();
                if (ImGui::ArrowButton("up", ImGuiDir_Up))
                {
                    mapNode->getMap()->moveLayer(layer, i + 1);
                }
            }

            ImGui::SameLine();
            if (ImGui::ArrowButton("right", ImGuiDir_Right))
            {
                const GeoExtent& extent = layer->getExtent();
                if (extent.isValid())
                {
                    std::vector<GeoPoint> points;
                    points.push_back(GeoPoint(extent.getSRS(), extent.west(), extent.south()));
                    points.push_back(GeoPoint(extent.getSRS(), extent.east(), extent.north()));

                    ViewFitter fitter(mapNode->getMap()->getSRS(), camera);
                    Viewpoint vp;
                    if (fitter.createViewpoint(points, vp))
                    {
                        manip->setViewpoint(vp, 2.0);
                    }
                }
                else if (layer->getNode())
                {
                    const osg::BoundingSphere& bs = layer->getNode()->getBound();
                    if (bs.valid())
                    {
                        osg::Vec3d c = bs.center();
                        double r = bs.radius();
                        const SpatialReference* mapSRS = mapNode->getMap()->getSRS();

                        std::vector<GeoPoint> points;
                        GeoPoint p;
                        p.fromWorld(mapSRS, osg::Vec3d(c.x() + r, c.y(), c.z())); points.push_back(p);
                        p.fromWorld(mapSRS, osg::Vec3d(c.x() - r, c.y(), c.z())); points.push_back(p);
                        p.fromWorld(mapSRS, osg::Vec3d(c.x(), c.y() + r, c.z())); points.push_back(p);
                        p.fromWorld(mapSRS, osg::Vec3d(c.x(), c.y() - r, c.z())); points.push_back(p);
                        p.fromWorld(mapSRS, osg::Vec3d(c.x(), c.y(), c.z() + r)); points.push_back(p);
                        p.fromWorld(mapSRS, osg::Vec3d(c.x(), c.y(), c.z() - r)); points.push_back(p);

                        ViewFitter fitter(mapNode->getMap()->getSRS(), camera);
                        Viewpoint vp;
                        if (fitter.createViewpoint(points, vp))
                        {
                            manip->setViewpoint(vp, 2.0);
                        }
                    }
                }
            }

            osgEarth::ImageLayer* imageLayer = dynamic_cast<osgEarth::ImageLayer*>(visibleLayer);
            if (imageLayer)
            {
                float opacity = imageLayer->getOpacity();
                ImGui::PushID("opacity");
                ImGui::SliderFloat("Opacity", &opacity, 0.0f, 1.0f);
                imageLayer->setOpacity(opacity);
                ImGui::PopID();
            }

            osgEarth::Contrib::ThreeDTilesLayer* threedTiles = dynamic_cast<osgEarth::Contrib::ThreeDTilesLayer*>(visibleLayer);
            if (threedTiles)
            {
                float sse = threedTiles->getMaximumScreenSpaceError();
                ImGui::PushID("sse");
                ImGui::SliderFloat("SSE", &sse, 0.0f, 50.0f);
                threedTiles->setMaximumScreenSpaceError(sse);
                ImGui::PopID();

                ImGui::PushID("debugVolumes");
                bool showBoundingVolumes = threedTiles->getTilesetNode()->getShowBoundingVolumes();
                ImGui::Checkbox("Show debug volumes", &showBoundingVolumes);
                threedTiles->getTilesetNode()->setShowBoundingVolumes(showBoundingVolumes);
                ImGui::PopID();

                ImGui::PushID("debugColors");
                bool colorPerTile = threedTiles->getTilesetNode()->getColorPerTile();
                ImGui::Checkbox("Show color per tile", &colorPerTile);
                threedTiles->getTilesetNode()->setColorPerTile(colorPerTile);
                ImGui::PopID();
            }
            ImGui::PopID();

            ImGui::Separator();
        }
        ImGui::End();
    }
};

class SearchGUI
{
public:
    SearchGUI():
        _search(""),
        _results(Status::Code::ServiceUnavailable, 0)
    {
        osg::ref_ptr<ThreadPool> pool = new ThreadPool();
        _options = new osgDB::Options();
        pool->put(_options.get());

    }

    void draw(EarthManipulator* manip)
    {
        ImGui::Begin("Search");
        //ImGuiInputTextFlags_Readonly
        if (ImGui::InputText("Search", _search, 128, ImGuiInputTextFlags_EnterReturnsTrue | ImGuiInputTextFlags_AutoSelectAll))
        {
            Geocoder geocoder;
            _results = geocoder.search(_search, _options.get());
        }

        if (_results.isReady())
        {
            if (_results.getStatus().isOK())
            {
                while (_results.getFeatures()->hasMore())
                {
                    Feature* f = _results.getFeatures()->nextFeature();
                    if (f->getGeometry())
                    {
                        GeoExtent extent(f->getSRS(), f->getGeometry()->getBounds());
                        double maxDim = osg::maximum(extent.width(), extent.height());
                        double range = ((0.5 * maxDim) / 0.267949849) * 111000.0;
                        double lon, lat;
                        extent.getCentroid(lon, lat);
                        manip->setViewpoint(Viewpoint("", lon, lat, 0, 0, -90, range), 3.0);
                        break;
                    }
                }
            }
            _results = Geocoder::Results(Status::Code::ServiceUnavailable, 0);
        }
        ImGui::End();
    }

    char _search[128];
    Geocoder::Results _results;
    osg::ref_ptr<osgDB::Options> _options;
};

class NetworkMonitorGUI
{
public:
    NetworkMonitorGUI() :
        _showOnlyActiveRequests(false),
        filter("")
    {

    }

    void draw()
    {
        ImGui::Begin("Network Monitor");
        NetworkMonitor::Requests requests;
        NetworkMonitor::getRequests(requests);

        bool enabled = NetworkMonitor::getEnabled();
        ImGui::Checkbox("Enabled", &enabled);
        NetworkMonitor::setEnabled(enabled);

        ImGui::Checkbox("Show active requests", &_showOnlyActiveRequests);
        ImGui::InputText("Filter", filter, 128);

        if (ImGui::Button("Clear"))
        {
            NetworkMonitor::clear();
        }

        ImGui::Columns(3, "requests");
        ImGui::Separator();
        ImGui::Text("Path"); ImGui::NextColumn();
        ImGui::Text("Duration (ms)"); ImGui::NextColumn();
        ImGui::Text("Status"); ImGui::NextColumn();
        ImGui::Separator();
        for (auto itr = requests.begin(); itr != requests.end(); ++itr)
        {
            if (!_showOnlyActiveRequests || !itr->second.isComplete)
            {
                if (strlen(filter) > 0)
                {
                    if (strstr(itr->second.uri.c_str(), filter) == NULL && strstr(itr->second.status.c_str(), filter) == NULL)
                    {
                        continue;
                    }
                }

                ImVec4 color = ImVec4(1.0, 1.0, 1.0, 1.0);
                if (itr->second.isComplete)
                {
                    if (strstr(itr->second.status.c_str(), "OK") != NULL)
                    {
                        // Color OK requests green
                        color = ImVec4(0.0, 1.0, 0.0, 1.0);
                    }
                    else
                    {
                        // Color bad requests red
                        color = ImVec4(1.0, 0.0, 0.0, 1.0);
                    }
                }

                ImGui::TextColored(color, itr->second.uri.c_str());  ImGui::NextColumn();
                ImGui::Text("%f", itr->second.getDuration()); ImGui::NextColumn();
                ImGui::Text(itr->second.status.c_str()); ImGui::NextColumn();
            }
        }
        ImGui::Columns(1);
        ImGui::Separator();
        ImGui::End();
    }

    bool _showOnlyActiveRequests;
    char filter[128];
};



#endif